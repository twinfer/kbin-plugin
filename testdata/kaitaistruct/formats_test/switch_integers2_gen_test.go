// Code generated by kaitai-test-gen-simple.go; DO NOT EDIT.
package formats_test

import (
	"bytes"
	"context"
	"log/slog"
	"maps"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/twinfer/kbin-plugin/pkg/kaitaistruct"
	switch_integers2_kaitai "github.com/twinfer/kbin-plugin/testdata/formats_kaitai_go_gen/switch_integers2"
)

func TestParse_SwitchIntegers2(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "switch_integers2.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)
	logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{Level: slog.LevelDebug}))
	interpreter, err := kaitaistruct.NewKaitaiInterpreter(schema, logger)
	require.NoError(t, err)

	// Read binary file
	binPath := filepath.Join("../../../test/src", "switch_integers.bin")
	binData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse with custom parser
	stream := kaitai.NewStream(bytes.NewReader(binData))
	parsed, err := interpreter.Parse(context.Background(), stream)
	require.NoError(t, err)

	// Convert to map for assertions
	customMap := kaitaistruct.ParsedDataToMap(parsed).(map[string]any)

	// Assertions from KSC test

	// Assert Code
	if code_val, ok := customMap["Code"]; ok {
		assert.EqualValues(t, 1, code_val)
	} else {
		t.Fatalf("Field 'Code' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Len
	if len_val, ok := customMap["Len"]; ok {
		assert.EqualValues(t, 7, len_val)
	} else {
		t.Fatalf("Field 'Len' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Ham
	if ham_val, ok := customMap["Ham"]; ok {
		assert.EqualValues(t, []uint8{2, 64, 64, 4, 55, 19, 0}, ham_val)
	} else {
		t.Fatalf("Field 'Ham' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Padding
	if padding_val, ok := customMap["Padding"]; ok {
		assert.EqualValues(t, 0, padding_val)
	} else {
		t.Fatalf("Field 'Padding' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert LenModStr
	if lenmodstr_val, ok := customMap["LenModStr"]; ok {
		assert.EqualValues(t, "13", lenmodstr_val)
	} else {
		t.Fatalf("Field 'LenModStr' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

}

func TestSerialize_SwitchIntegers2(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "switch_integers2.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)

	serializer, err := kaitaistruct.NewKaitaiSerializer(schema, nil)
	require.NoError(t, err)

	// Read original binary
	binPath := filepath.Join("../../../test/src", "switch_integers.bin")
	originalData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse original
	stream := kaitai.NewStream(bytes.NewReader(originalData))
	original := switch_integers2_kaitai.NewSwitchIntegers2()
	err = original.Read(stream, original, original)
	require.NoError(t, err)

	// Serialize and verify round-trip
	inputMap := structToMapSwitchIntegers2(t, original)

	serialized, err := serializer.Serialize(context.Background(), inputMap)
	require.NoError(t, err)

	// Parse serialized data
	stream2 := kaitai.NewStream(bytes.NewReader(serialized))
	reparsed := switch_integers2_kaitai.NewSwitchIntegers2()
	err = reparsed.Read(stream2, reparsed, reparsed)
	require.NoError(t, err)

	// Compare structures with Phase 2/3 enhanced comparison
	cmpOpts := []cmp.Option{
		cmpopts.IgnoreUnexported(
			kaitai.Stream{},
		),
		cmpopts.IgnoreFields(switch_integers2_kaitai.SwitchIntegers2{}, "_io", "_parent", "_root"),
		cmpopts.EquateEmpty(),
	}
	if diff := cmp.Diff(original, reparsed, cmpOpts...); diff != "" {
		t.Errorf("Serialization mismatch (-original +reparsed):\n%s", diff)
	}
}

// structToMapSwitchIntegers2 converts KSC struct to map for serializer
func structToMapSwitchIntegers2(t *testing.T, data any) map[string]any {
	// Use reflection to handle KSC structs with method-based values
	return structToMapReflectiveSwitchIntegers2(t, data)
}

// structToMapReflectiveSwitchIntegers2 uses reflection to convert KSC structs including method calls
func structToMapReflectiveSwitchIntegers2(t *testing.T, data any) map[string]any {
	result := make(map[string]any)

	val := reflect.ValueOf(data)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	typ := val.Type()

	// Process fields
	for i := 0; i < val.NumField(); i++ {
		field := typ.Field(i)
		fieldVal := val.Field(i)

		// Skip internal KSC fields
		if strings.HasPrefix(field.Name, "_") {
			continue
		}

		fieldName := strings.ToLower(field.Name)

		if !fieldVal.IsValid() || fieldVal.IsZero() {
			continue
		}

		// Handle different field types
		switch fieldVal.Kind() {
		case reflect.Ptr:
			if !fieldVal.IsNil() {
				// For custom types, check for AsInt/AsStr methods
				subResult := make(map[string]any)

				// Try to call AsInt method
				if method := fieldVal.MethodByName("AsInt"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asint"] = results[0].Interface()
					}
				}

				// Try to call AsStr method
				if method := fieldVal.MethodByName("AsStr"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asstr"] = results[0].Interface()
					}
				}

				// Also include raw fields
				subMap := structToMapReflectiveSwitchIntegers2(t, fieldVal.Interface())
				for k, v := range subMap {
					if _, exists := subResult[k]; !exists {
						subResult[k] = v
					}
				}

				result[fieldName] = subResult
			}
		case reflect.Slice:
			if fieldVal.Len() > 0 {
				slice := make([]any, fieldVal.Len())
				for j := 0; j < fieldVal.Len(); j++ {
					slice[j] = fieldVal.Index(j).Interface()
				}
				result[fieldName] = slice
			}
		default:
			result[fieldName] = fieldVal.Interface()
		}
	}

	return result
}
