// Code generated by kaitai-test-gen-simple.go; DO NOT EDIT.
package formats_test

import (
	"bytes"
	"context"
	"log/slog"
	"maps"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/twinfer/kbin-plugin/pkg/kaitaistruct"
	expr_2_kaitai "github.com/twinfer/kbin-plugin/testdata/formats_kaitai_go_gen/expr_2"
)

func TestParse_Expr2(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "expr_2.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)
	logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{Level: slog.LevelDebug}))
	interpreter, err := kaitaistruct.NewKaitaiInterpreter(schema, logger)
	require.NoError(t, err)

	// Read binary file
	binPath := filepath.Join("../../../test/src", "str_encodings.bin")
	binData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse with custom parser
	stream := kaitai.NewStream(bytes.NewReader(binData))
	parsed, err := interpreter.Parse(context.Background(), stream)
	require.NoError(t, err)

	// Convert to map for assertions
	customMap := kaitaistruct.ParsedDataToMap(parsed).(map[string]any)

	// Assertions from KSC test

	// Assert Str1.LenOrig
	if str1_lenorig_lvl0_map, ok := customMap["Str1"].(map[string]any); ok {
		if str1_lenorig_val, ok := str1_lenorig_lvl0_map["LenOrig"]; ok {
			assert.EqualValues(t, 10, str1_lenorig_val)
		} else {
			t.Fatalf("Field 'LenOrig' not found in str1_lenorig_lvl0_map (keys: %v)", maps.Keys(str1_lenorig_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Str1' not found or not a map while asserting Str1.LenOrig")
	}

	// Assert Str1.LenMod
	if str1_lenmod_lvl0_map, ok := customMap["Str1"].(map[string]any); ok {
		if str1_lenmod_val, ok := str1_lenmod_lvl0_map["LenMod"]; ok {
			assert.EqualValues(t, 7, str1_lenmod_val)
		} else {
			t.Fatalf("Field 'LenMod' not found in str1_lenmod_lvl0_map (keys: %v)", maps.Keys(str1_lenmod_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Str1' not found or not a map while asserting Str1.LenMod")
	}

	// Assert Str1.Str
	if str1_str_lvl0_map, ok := customMap["Str1"].(map[string]any); ok {
		if str1_str_val, ok := str1_str_lvl0_map["Str"]; ok {
			assert.EqualValues(t, "Some AS", str1_str_val)
		} else {
			t.Fatalf("Field 'Str' not found in str1_str_lvl0_map (keys: %v)", maps.Keys(str1_str_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Str1' not found or not a map while asserting Str1.Str")
	}

	// Assert Str1Len
	if str1len_val, ok := customMap["Str1Len"]; ok {
		assert.EqualValues(t, 7, str1len_val)
	} else {
		t.Fatalf("Field 'Str1Len' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Str1LenMod
	if str1lenmod_val, ok := customMap["Str1LenMod"]; ok {
		assert.EqualValues(t, 7, str1lenmod_val)
	} else {
		t.Fatalf("Field 'Str1LenMod' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Str1Byte1
	if str1byte1_val, ok := customMap["Str1Byte1"]; ok {
		assert.EqualValues(t, 73, str1byte1_val)
	} else {
		t.Fatalf("Field 'Str1Byte1' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Str1Avg
	if str1avg_val, ok := customMap["Str1Avg"]; ok {
		assert.EqualValues(t, 73, str1avg_val)
	} else {
		t.Fatalf("Field 'Str1Avg' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Str1Char5
	if str1char5_val, ok := customMap["Str1Char5"]; ok {
		assert.EqualValues(t, "e", str1char5_val)
	} else {
		t.Fatalf("Field 'Str1Char5' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Tmp7.Byte0
	if tmp7_byte0_lvl0_map, ok := customMap["Tmp7"].(map[string]any); ok {
		if tmp7_byte0_val, ok := tmp7_byte0_lvl0_map["Byte0"]; ok {
			assert.EqualValues(t, 101, tmp7_byte0_val)
		} else {
			t.Fatalf("Field 'Byte0' not found in tmp7_byte0_lvl0_map (keys: %v)", maps.Keys(tmp7_byte0_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp7' not found or not a map while asserting Tmp7.Byte0")
	}

	// Assert Tmp8.Byte0
	if tmp8_byte0_lvl0_map, ok := customMap["Tmp8"].(map[string]any); ok {
		if tmp8_byte0_val, ok := tmp8_byte0_lvl0_map["Byte0"]; ok {
			assert.EqualValues(t, 101, tmp8_byte0_val)
		} else {
			t.Fatalf("Field 'Byte0' not found in tmp8_byte0_lvl0_map (keys: %v)", maps.Keys(tmp8_byte0_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp8' not found or not a map while asserting Tmp8.Byte0")
	}

	// Assert Tmp9.Byte1
	if tmp9_byte1_lvl0_map, ok := customMap["Tmp9"].(map[string]any); ok {
		if tmp9_byte1_val, ok := tmp9_byte1_lvl0_map["Byte1"]; ok {
			assert.EqualValues(t, 32, tmp9_byte1_val)
		} else {
			t.Fatalf("Field 'Byte1' not found in tmp9_byte1_lvl0_map (keys: %v)", maps.Keys(tmp9_byte1_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp9' not found or not a map while asserting Tmp9.Byte1")
	}

	// Assert Tmp10.Byte2
	if tmp10_byte2_lvl0_map, ok := customMap["Tmp10"].(map[string]any); ok {
		if tmp10_byte2_val, ok := tmp10_byte2_lvl0_map["Byte2"]; ok {
			assert.EqualValues(t, 65, tmp10_byte2_val)
		} else {
			t.Fatalf("Field 'Byte2' not found in tmp10_byte2_lvl0_map (keys: %v)", maps.Keys(tmp10_byte2_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp10' not found or not a map while asserting Tmp10.Byte2")
	}

	// Assert Tmp11.Avg
	if tmp11_avg_lvl0_map, ok := customMap["Tmp11"].(map[string]any); ok {
		if tmp11_avg_val, ok := tmp11_avg_lvl0_map["Avg"]; ok {
			assert.EqualValues(t, 48, tmp11_avg_val)
		} else {
			t.Fatalf("Field 'Avg' not found in tmp11_avg_lvl0_map (keys: %v)", maps.Keys(tmp11_avg_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp11' not found or not a map while asserting Tmp11.Avg")
	}

	// Assert Tmp13.Byte0
	if tmp13_byte0_lvl0_map, ok := customMap["Tmp13"].(map[string]any); ok {
		if tmp13_byte0_val, ok := tmp13_byte0_lvl0_map["Byte0"]; ok {
			assert.EqualValues(t, 101, tmp13_byte0_val)
		} else {
			t.Fatalf("Field 'Byte0' not found in tmp13_byte0_lvl0_map (keys: %v)", maps.Keys(tmp13_byte0_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp13' not found or not a map while asserting Tmp13.Byte0")
	}

	// Assert Tmp14.Byte1
	if tmp14_byte1_lvl0_map, ok := customMap["Tmp14"].(map[string]any); ok {
		if tmp14_byte1_val, ok := tmp14_byte1_lvl0_map["Byte1"]; ok {
			assert.EqualValues(t, 32, tmp14_byte1_val)
		} else {
			t.Fatalf("Field 'Byte1' not found in tmp14_byte1_lvl0_map (keys: %v)", maps.Keys(tmp14_byte1_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp14' not found or not a map while asserting Tmp14.Byte1")
	}

	// Assert Tmp15.Byte2
	if tmp15_byte2_lvl0_map, ok := customMap["Tmp15"].(map[string]any); ok {
		if tmp15_byte2_val, ok := tmp15_byte2_lvl0_map["Byte2"]; ok {
			assert.EqualValues(t, 65, tmp15_byte2_val)
		} else {
			t.Fatalf("Field 'Byte2' not found in tmp15_byte2_lvl0_map (keys: %v)", maps.Keys(tmp15_byte2_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp15' not found or not a map while asserting Tmp15.Byte2")
	}

	// Assert Tmp16.Avg
	if tmp16_avg_lvl0_map, ok := customMap["Tmp16"].(map[string]any); ok {
		if tmp16_avg_val, ok := tmp16_avg_lvl0_map["Avg"]; ok {
			assert.EqualValues(t, 48, tmp16_avg_val)
		} else {
			t.Fatalf("Field 'Avg' not found in tmp16_avg_lvl0_map (keys: %v)", maps.Keys(tmp16_avg_lvl0_map))
		}
	} else {
		t.Fatalf("Field 'Tmp16' not found or not a map while asserting Tmp16.Avg")
	}

}

func TestSerialize_Expr2(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "expr_2.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)

	serializer, err := kaitaistruct.NewKaitaiSerializer(schema, nil)
	require.NoError(t, err)

	// Read original binary
	binPath := filepath.Join("../../../test/src", "str_encodings.bin")
	originalData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse original
	stream := kaitai.NewStream(bytes.NewReader(originalData))
	original := expr_2_kaitai.NewExpr2()
	err = original.Read(stream, original, original)
	require.NoError(t, err)

	// Serialize and verify round-trip
	inputMap := structToMapExpr2(t, original)

	serialized, err := serializer.Serialize(context.Background(), inputMap)
	require.NoError(t, err)

	// Parse serialized data
	stream2 := kaitai.NewStream(bytes.NewReader(serialized))
	reparsed := expr_2_kaitai.NewExpr2()
	err = reparsed.Read(stream2, reparsed, reparsed)
	require.NoError(t, err)

	// Compare structures with Phase 2/3 enhanced comparison
	cmpOpts := []cmp.Option{
		cmpopts.IgnoreUnexported(
			kaitai.Stream{},
		),
		cmpopts.IgnoreFields(expr_2_kaitai.Expr2{}, "_io", "_parent", "_root"),
		cmpopts.EquateEmpty(),
	}
	if diff := cmp.Diff(original, reparsed, cmpOpts...); diff != "" {
		t.Errorf("Serialization mismatch (-original +reparsed):\n%s", diff)
	}
}

// structToMapExpr2 converts KSC struct to map for serializer
func structToMapExpr2(t *testing.T, data any) map[string]any {
	// Use reflection to handle KSC structs with method-based values
	return structToMapReflectiveExpr2(t, data)
}

// structToMapReflectiveExpr2 uses reflection to convert KSC structs including method calls
func structToMapReflectiveExpr2(t *testing.T, data any) map[string]any {
	result := make(map[string]any)

	val := reflect.ValueOf(data)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	typ := val.Type()

	// Process fields
	for i := 0; i < val.NumField(); i++ {
		field := typ.Field(i)
		fieldVal := val.Field(i)

		// Skip internal KSC fields
		if strings.HasPrefix(field.Name, "_") {
			continue
		}

		fieldName := strings.ToLower(field.Name)

		if !fieldVal.IsValid() || fieldVal.IsZero() {
			continue
		}

		// Handle different field types
		switch fieldVal.Kind() {
		case reflect.Ptr:
			if !fieldVal.IsNil() {
				// For custom types, check for AsInt/AsStr methods
				subResult := make(map[string]any)

				// Try to call AsInt method
				if method := fieldVal.MethodByName("AsInt"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asint"] = results[0].Interface()
					}
				}

				// Try to call AsStr method
				if method := fieldVal.MethodByName("AsStr"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asstr"] = results[0].Interface()
					}
				}

				// Also include raw fields
				subMap := structToMapReflectiveExpr2(t, fieldVal.Interface())
				for k, v := range subMap {
					if _, exists := subResult[k]; !exists {
						subResult[k] = v
					}
				}

				result[fieldName] = subResult
			}
		case reflect.Slice:
			if fieldVal.Len() > 0 {
				slice := make([]any, fieldVal.Len())
				for j := 0; j < fieldVal.Len(); j++ {
					slice[j] = fieldVal.Index(j).Interface()
				}
				result[fieldName] = slice
			}
		default:
			result[fieldName] = fieldVal.Interface()
		}
	}

	return result
}
