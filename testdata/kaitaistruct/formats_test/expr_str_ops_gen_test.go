// Code generated by kaitai-test-gen-simple.go; DO NOT EDIT.
package formats_test

import (
	"bytes"
	"context"
	"io"
	"log/slog"
	"maps"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/twinfer/kbin-plugin/pkg/kaitaistruct"
	expr_str_ops_kaitai "github.com/twinfer/kbin-plugin/testdata/formats_kaitai_go_gen/expr_str_ops"
)

func TestParse_ExprStrOps(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "expr_str_ops.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)
	logger := slog.New(slog.NewTextHandler(io.Discard, nil))
	interpreter, err := kaitaistruct.NewKaitaiInterpreter(schema, logger)
	require.NoError(t, err)

	// Read binary file
	binPath := filepath.Join("../../../test/src", "term_strz.bin")
	binData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse with custom parser
	stream := kaitai.NewStream(bytes.NewReader(binData))
	parsed, err := interpreter.Parse(context.Background(), stream)
	require.NoError(t, err)

	// Convert to map for assertions
	customMap := kaitaistruct.ParsedDataToMap(parsed).(map[string]any)

	// Assertions from KSC test

	// Assert One
	if one_val, ok := customMap["one"]; ok {
		assert.EqualValues(t, "foo|b", one_val)
	} else {
		t.Fatalf("Field 'one' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert OneLen
	if one_len_val, ok := customMap["one_len"]; ok {
		assert.EqualValues(t, 5, one_len_val)
	} else {
		t.Logf("Available keys: %v", maps.Keys(customMap))
		t.Logf("Full map content: %+v", customMap)
		t.Fatalf("Field 'one_len' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert OneRev
	if one_rev_val, ok := customMap["one_rev"]; ok {
		assert.EqualValues(t, "b|oof", one_rev_val)
	} else {
		t.Fatalf("Field 'one_rev' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert OneSubstr0To3
	if one_substr0to3_val, ok := customMap["one_substr_0_to_3"]; ok {
		assert.EqualValues(t, "foo", one_substr0to3_val)
	} else {
		t.Logf("Available keys: %v", maps.Keys(customMap))
		t.Logf("Full map content: %+v", customMap)
		t.Fatalf("Field 'one_substr_0_to_3' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert OneSubstr2To5
	if one_substr2to5_val, ok := customMap["one_substr_2_to_5"]; ok {
		assert.EqualValues(t, "o|b", one_substr2to5_val)
	} else {
		t.Fatalf("Field 'one_substr_2_to_5' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert OneSubstr3To3
	if one_substr3to3_val, ok := customMap["one_substr_3_to_3"]; ok {
		assert.EqualValues(t, "", one_substr3to3_val)
	} else {
		t.Fatalf("Field 'one_substr_3_to_3' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert OneSubstr0To0
	if one_substr0to0_val, ok := customMap["one_substr_0_to_0"]; ok {
		assert.EqualValues(t, "", one_substr0to0_val)
	} else {
		t.Fatalf("Field 'one_substr_0_to_0' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Two
	if two_val, ok := customMap["two"]; ok {
		assert.EqualValues(t, "0123456789", two_val)
	} else {
		t.Fatalf("Field 'two' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert TwoLen
	if two_len_val, ok := customMap["two_len"]; ok {
		assert.EqualValues(t, 10, two_len_val)
	} else {
		t.Fatalf("Field 'two_len' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert TwoRev
	if two_rev_val, ok := customMap["two_rev"]; ok {
		assert.EqualValues(t, "9876543210", two_rev_val)
	} else {
		t.Fatalf("Field 'two_rev' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert TwoSubstr0To7
	if two_substr0to7_val, ok := customMap["two_substr_0_to_7"]; ok {
		assert.EqualValues(t, "0123456", two_substr0to7_val)
	} else {
		t.Fatalf("Field 'two_substr_0_to_7' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert TwoSubstr4To10
	if two_substr4to10_val, ok := customMap["two_substr_4_to_10"]; ok {
		assert.EqualValues(t, "456789", two_substr4to10_val)
	} else {
		t.Fatalf("Field 'two_substr_4_to_10' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert TwoSubstr0To10
	if two_substr0to10_val, ok := customMap["two_substr_0_to_10"]; ok {
		assert.EqualValues(t, "0123456789", two_substr0to10_val)
	} else {
		t.Fatalf("Field 'two_substr_0_to_10' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert ToIAttr
	if to_i_attr_val, ok := customMap["to_i_attr"]; ok {
		assert.EqualValues(t, 9173, to_i_attr_val)
	} else {
		t.Fatalf("Field 'to_i_attr' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert ToIR10
	if to_ir10_val, ok := customMap["to_i_r10"]; ok {
		assert.EqualValues(t, -72, to_ir10_val)
	} else {
		t.Fatalf("Field 'to_i_r10' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert ToIR2
	if to_ir2_val, ok := customMap["to_i_r2"]; ok {
		assert.EqualValues(t, 86, to_ir2_val)
	} else {
		t.Fatalf("Field 'to_i_r2' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert ToIR8
	if to_ir8_val, ok := customMap["to_i_r8"]; ok {
		assert.EqualValues(t, 465, to_ir8_val)
	} else {
		t.Fatalf("Field 'to_i_r8' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert ToIR16
	if to_ir16_val, ok := customMap["to_i_r16"]; ok {
		assert.EqualValues(t, 18383, to_ir16_val)
	} else {
		t.Fatalf("Field 'to_i_r16' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

}

func TestSerialize_ExprStrOps(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "expr_str_ops.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)

	serializer, err := kaitaistruct.NewKaitaiSerializer(schema, nil)
	require.NoError(t, err)

	// Read original binary
	binPath := filepath.Join("../../../test/src", "term_strz.bin")
	originalData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse original
	stream := kaitai.NewStream(bytes.NewReader(originalData))
	original := expr_str_ops_kaitai.NewExprStrOps()
	err = original.Read(stream, original, original)
	require.NoError(t, err)

	// Serialize and verify round-trip
	inputMap := structToMapExprStrOps(t, original)

	serialized, err := serializer.Serialize(context.Background(), inputMap)
	require.NoError(t, err)

	// Parse serialized data
	stream2 := kaitai.NewStream(bytes.NewReader(serialized))
	reparsed := expr_str_ops_kaitai.NewExprStrOps()
	err = reparsed.Read(stream2, reparsed, reparsed)
	require.NoError(t, err)

	// Compare structures with Phase 2/3 enhanced comparison
	cmpOpts := []cmp.Option{
		cmpopts.IgnoreUnexported(
			kaitai.Stream{},
		),
		cmpopts.IgnoreFields(expr_str_ops_kaitai.ExprStrOps{}, "_io", "_parent", "_root"),
		cmpopts.EquateEmpty(),
	}
	if diff := cmp.Diff(original, reparsed, cmpOpts...); diff != "" {
		t.Errorf("Serialization mismatch (-original +reparsed):\n%s", diff)
	}
}

// structToMapExprStrOps converts KSC struct to map for serializer
func structToMapExprStrOps(t *testing.T, data any) map[string]any {
	// Use reflection to handle KSC structs with method-based values
	return structToMapReflectiveExprStrOps(t, data)
}

// structToMapReflectiveExprStrOps uses reflection to convert KSC structs including method calls
func structToMapReflectiveExprStrOps(t *testing.T, data any) map[string]any {
	result := make(map[string]any)

	val := reflect.ValueOf(data)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	typ := val.Type()

	// Process fields
	for i := 0; i < val.NumField(); i++ {
		field := typ.Field(i)
		fieldVal := val.Field(i)

		// Skip internal KSC fields
		if strings.HasPrefix(field.Name, "_") {
			continue
		}

		fieldName := strings.ToLower(field.Name)

		if !fieldVal.IsValid() || fieldVal.IsZero() {
			continue
		}

		// Handle different field types
		switch fieldVal.Kind() {
		case reflect.Ptr:
			if !fieldVal.IsNil() {
				// For custom types, check for AsInt/AsStr methods
				subResult := make(map[string]any)

				// Try to call AsInt method
				if method := fieldVal.MethodByName("AsInt"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asint"] = results[0].Interface()
					}
				}

				// Try to call AsStr method
				if method := fieldVal.MethodByName("AsStr"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asstr"] = results[0].Interface()
					}
				}

				// Also include raw fields
				subMap := structToMapReflectiveExprStrOps(t, fieldVal.Interface())
				for k, v := range subMap {
					if _, exists := subResult[k]; !exists {
						subResult[k] = v
					}
				}

				result[fieldName] = subResult
			}
		case reflect.Slice:
			if fieldVal.Len() > 0 {
				slice := make([]any, fieldVal.Len())
				for j := 0; j < fieldVal.Len(); j++ {
					slice[j] = fieldVal.Index(j).Interface()
				}
				result[fieldName] = slice
			}
		default:
			result[fieldName] = fieldVal.Interface()
		}
	}

	return result
}
