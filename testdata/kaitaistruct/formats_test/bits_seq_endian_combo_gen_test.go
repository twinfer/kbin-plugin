// Code generated by kaitai-test-gen-simple.go; DO NOT EDIT.
package formats_test

import (
	"bytes"
	"context"
	"log/slog"
	"maps"
	"os"
	"path/filepath"
	"reflect"
	"strings"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"
	"github.com/kaitai-io/kaitai_struct_go_runtime/kaitai"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"github.com/twinfer/kbin-plugin/pkg/kaitaistruct"
	bits_seq_endian_combo_kaitai "github.com/twinfer/kbin-plugin/testdata/formats_kaitai_go_gen/bits_seq_endian_combo"
)

func TestParse_BitsSeqEndianCombo(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "bits_seq_endian_combo.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)
	logger := slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{Level: slog.LevelDebug}))
	interpreter, err := kaitaistruct.NewKaitaiInterpreter(schema, logger)
	require.NoError(t, err)

	// Read binary file
	binPath := filepath.Join("../../../test/src", "process_xor_4.bin")
	binData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse with custom parser
	stream := kaitai.NewStream(bytes.NewReader(binData))
	parsed, err := interpreter.Parse(context.Background(), stream)
	require.NoError(t, err)

	// Convert to map for assertions
	customMap := kaitaistruct.ParsedDataToMap(parsed).(map[string]any)

	// Assertions from KSC test

	// Assert Be1
	if be1_val, ok := customMap["Be1"]; ok {
		assert.EqualValues(t, 59, be1_val)
	} else {
		t.Fatalf("Field 'Be1' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Be2
	if be2_val, ok := customMap["Be2"]; ok {
		assert.EqualValues(t, 187, be2_val)
	} else {
		t.Fatalf("Field 'Be2' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Le3
	if le3_val, ok := customMap["Le3"]; ok {
		assert.EqualValues(t, 163, le3_val)
	} else {
		t.Fatalf("Field 'Le3' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Be4
	if be4_val, ok := customMap["Be4"]; ok {
		assert.EqualValues(t, 20, be4_val)
	} else {
		t.Fatalf("Field 'Be4' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Le5
	if le5_val, ok := customMap["Le5"]; ok {
		assert.EqualValues(t, 10, le5_val)
	} else {
		t.Fatalf("Field 'Le5' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Le6
	if le6_val, ok := customMap["Le6"]; ok {
		assert.EqualValues(t, 36, le6_val)
	} else {
		t.Fatalf("Field 'Le6' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Le7
	if le7_val, ok := customMap["Le7"]; ok {
		assert.EqualValues(t, 26, le7_val)
	} else {
		t.Fatalf("Field 'Le7' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

	// Assert Be8
	if be8_val, ok := customMap["Be8"]; ok {
		assert.EqualValues(t, true, be8_val)
	} else {
		t.Fatalf("Field 'Be8' not found in customMap (keys: %v)", maps.Keys(customMap))
	}

}

func TestSerialize_BitsSeqEndianCombo(t *testing.T) {
	// Load schema
	ksyPath := filepath.Join("../../../test/formats", "bits_seq_endian_combo.ksy")
	yamlData, err := os.ReadFile(ksyPath)
	require.NoError(t, err)

	schema, err := kaitaistruct.NewKaitaiSchemaFromYAML(yamlData)
	require.NoError(t, err)

	serializer, err := kaitaistruct.NewKaitaiSerializer(schema, nil)
	require.NoError(t, err)

	// Read original binary
	binPath := filepath.Join("../../../test/src", "process_xor_4.bin")
	originalData, err := os.ReadFile(binPath)
	require.NoError(t, err)

	// Parse original
	stream := kaitai.NewStream(bytes.NewReader(originalData))
	original := bits_seq_endian_combo_kaitai.NewBitsSeqEndianCombo()
	err = original.Read(stream, original, original)
	require.NoError(t, err)

	// Serialize and verify round-trip
	inputMap := structToMapBitsSeqEndianCombo(t, original)

	serialized, err := serializer.Serialize(context.Background(), inputMap)
	require.NoError(t, err)

	// Parse serialized data
	stream2 := kaitai.NewStream(bytes.NewReader(serialized))
	reparsed := bits_seq_endian_combo_kaitai.NewBitsSeqEndianCombo()
	err = reparsed.Read(stream2, reparsed, reparsed)
	require.NoError(t, err)

	// Compare structures with Phase 2/3 enhanced comparison
	cmpOpts := []cmp.Option{
		cmpopts.IgnoreUnexported(
			kaitai.Stream{},
		),
		cmpopts.IgnoreFields(bits_seq_endian_combo_kaitai.BitsSeqEndianCombo{}, "_io", "_parent", "_root"),
		cmpopts.EquateEmpty(),
	}
	if diff := cmp.Diff(original, reparsed, cmpOpts...); diff != "" {
		t.Errorf("Serialization mismatch (-original +reparsed):\n%s", diff)
	}
}

// structToMapBitsSeqEndianCombo converts KSC struct to map for serializer
func structToMapBitsSeqEndianCombo(t *testing.T, data any) map[string]any {
	// Use reflection to handle KSC structs with method-based values
	return structToMapReflectiveBitsSeqEndianCombo(t, data)
}

// structToMapReflectiveBitsSeqEndianCombo uses reflection to convert KSC structs including method calls
func structToMapReflectiveBitsSeqEndianCombo(t *testing.T, data any) map[string]any {
	result := make(map[string]any)

	val := reflect.ValueOf(data)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	typ := val.Type()

	// Process fields
	for i := 0; i < val.NumField(); i++ {
		field := typ.Field(i)
		fieldVal := val.Field(i)

		// Skip internal KSC fields
		if strings.HasPrefix(field.Name, "_") {
			continue
		}

		fieldName := strings.ToLower(field.Name)

		if !fieldVal.IsValid() || fieldVal.IsZero() {
			continue
		}

		// Handle different field types
		switch fieldVal.Kind() {
		case reflect.Ptr:
			if !fieldVal.IsNil() {
				// For custom types, check for AsInt/AsStr methods
				subResult := make(map[string]any)

				// Try to call AsInt method
				if method := fieldVal.MethodByName("AsInt"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asint"] = results[0].Interface()
					}
				}

				// Try to call AsStr method
				if method := fieldVal.MethodByName("AsStr"); method.IsValid() {
					if results := method.Call(nil); len(results) == 2 && results[1].IsNil() {
						subResult["asstr"] = results[0].Interface()
					}
				}

				// Also include raw fields
				subMap := structToMapReflectiveBitsSeqEndianCombo(t, fieldVal.Interface())
				for k, v := range subMap {
					if _, exists := subResult[k]; !exists {
						subResult[k] = v
					}
				}

				result[fieldName] = subResult
			}
		case reflect.Slice:
			if fieldVal.Len() > 0 {
				slice := make([]any, fieldVal.Len())
				for j := 0; j < fieldVal.Len(); j++ {
					slice[j] = fieldVal.Index(j).Interface()
				}
				result[fieldName] = slice
			}
		default:
			result[fieldName] = fieldVal.Interface()
		}
	}

	return result
}
